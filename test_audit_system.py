"""
Script de verificaci√≥n del sistema de auditor√≠a autom√°tica para TypeAnimator.
Verifica que la auditor√≠a y reparaci√≥n autom√°tica funcione correctamente.
"""

import bpy
import logging

logger = logging.getLogger(__name__)

def test_audit_repair_operator():
    """Test del operador de auditor√≠a y reparaci√≥n."""
    print("=== TEST: OPERADOR DE AUDITOR√çA Y REPARACI√ìN ===")
    
    try:
        # Ejecutar el operador de auditor√≠a
        print("üîç Ejecutando operador de auditor√≠a...")
        
        # Verificar que el operador existe
        if hasattr(bpy.ops, 'typeanimator') and hasattr(bpy.ops.typeanimator, 'audit_repair_curves'):
            result = bpy.ops.typeanimator.audit_repair_curves()
            
            if result == {'FINISHED'}:
                print("‚úÖ Operador de auditor√≠a ejecutado exitosamente")
                return True
            else:
                print(f"‚ùå Operador de auditor√≠a fall√≥: {result}")
                return False
        else:
            print("‚ùå Operador de auditor√≠a no encontrado")
            return False
            
    except Exception as e:
        print(f"‚ùå ERROR ejecutando operador: {e}")
        return False

def test_manual_node_deletion():
    """Test de eliminaci√≥n manual de nodos y regeneraci√≥n."""
    print("\n=== TEST: ELIMINACI√ìN MANUAL DE NODOS ===")
    
    try:
        # Encontrar el NodeGroup
        ng = bpy.data.node_groups.get("txFxCurveData")
        if not ng:
            print("‚ùå ERROR: No se encontr√≥ NodeGroup txFxCurveData")
            return False
        
        print(f"‚úÖ NodeGroup encontrado: {ng.name}")
        
        # Contar nodos antes
        curve_nodes_before = [n for n in ng.nodes if "_curve_" in n.name]
        print(f"üìä Nodos de curva antes: {len(curve_nodes_before)}")
        
        # Eliminar algunos nodos manualmente
        nodes_to_delete = curve_nodes_before[:2] if len(curve_nodes_before) >= 2 else curve_nodes_before
        
        for node in nodes_to_delete:
            print(f"üóëÔ∏è Eliminando nodo: {node.name}")
            ng.nodes.remove(node)
        
        print(f"üìä Nodos eliminados: {len(nodes_to_delete)}")
        
        # Recargar el addon para activar auditor√≠a autom√°tica
        print("üîÑ Recargando addon...")
        
        # Simular recarga ejecutando auditor√≠a manual
        try:
            from curves import audit_or_repair_curve_nodegroup
            audit_results = audit_or_repair_curve_nodegroup()
            
            print(f"üìä Resultados de auditor√≠a:")
            print(f"   Total objetos: {audit_results.get('total_objects', 0)}")
            print(f"   Objetos v√°lidos: {audit_results.get('valid_objects', 0)}")
            print(f"   Objetos reparados: {audit_results.get('repaired_objects', 0)}")
            
            # Verificar que se repararon los nodos
            curve_nodes_after = [n for n in ng.nodes if "_curve_" in n.name]
            print(f"üìä Nodos de curva despu√©s: {len(curve_nodes_after)}")
            
            if len(curve_nodes_after) >= len(curve_nodes_before) - len(nodes_to_delete):
                print("‚úÖ Nodos reparados correctamente")
                return True
            else:
                print("‚ùå Nodos no se repararon completamente")
                return False
                
        except ImportError as e:
            print(f"‚ùå ERROR: No se puede importar funci√≥n de auditor√≠a: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå ERROR en test: {e}")
        return False

def test_audit_on_startup():
    """Test de auditor√≠a autom√°tica al iniciar."""
    print("\n=== TEST: AUDITOR√çA AL INICIAR ===")
    
    try:
        from constants import AUDIT_VALIDATE_ON_STARTUP
        
        print(f"üìä AUDIT_VALIDATE_ON_STARTUP: {AUDIT_VALIDATE_ON_STARTUP}")
        
        if AUDIT_VALIDATE_ON_STARTUP:
            print("‚úÖ Auditor√≠a autom√°tica habilitada al iniciar")
            
            # Simular auditor√≠a de inicio
            try:
                from curves import audit_or_repair_curve_nodegroup
                audit_results = audit_or_repair_curve_nodegroup()
                
                print(f"üìä Auditor√≠a de inicio completada:")
                print(f"   Objetos auditados: {audit_results.get('total_objects', 0)}")
                print(f"   Problemas encontrados: {len(audit_results.get('warnings', []))}")
                print(f"   Reparaciones realizadas: {audit_results.get('repaired_objects', 0)}")
                
                return True
                
            except ImportError as e:
                print(f"‚ùå ERROR: No se puede ejecutar auditor√≠a: {e}")
                return False
        else:
            print("‚ö†Ô∏è Auditor√≠a autom√°tica deshabilitada al iniciar")
            return True
            
    except ImportError as e:
        print(f"‚ùå ERROR: No se puede importar configuraci√≥n: {e}")
        return False
    except Exception as e:
        print(f"‚ùå ERROR en test: {e}")
        return False

def test_audit_logging():
    """Test de logging de auditor√≠a."""
    print("\n=== TEST: LOGGING DE AUDITOR√çA ===")
    
    try:
        from constants import AUDIT_LOG_DETAILS
        
        print(f"üìä AUDIT_LOG_DETAILS: {AUDIT_LOG_DETAILS}")
        
        if AUDIT_LOG_DETAILS:
            print("‚úÖ Logging detallado habilitado")
            
            # Verificar que el logger est√° configurado
            logger = logging.getLogger(__name__)
            if logger.handlers:
                print("‚úÖ Logger configurado con handlers")
            else:
                print("‚ö†Ô∏è Logger sin handlers configurados")
            
            return True
        else:
            print("‚ö†Ô∏è Logging detallado deshabilitado")
            return True
            
    except ImportError as e:
        print(f"‚ùå ERROR: No se puede importar configuraci√≥n: {e}")
        return False
    except Exception as e:
        print(f"‚ùå ERROR en test: {e}")
        return False

def test_audit_auto_repair():
    """Test de reparaci√≥n autom√°tica."""
    print("\n=== TEST: REPARACI√ìN AUTOM√ÅTICA ===")
    
    try:
        from constants import AUDIT_AUTO_REPAIR
        
        print(f"üìä AUDIT_AUTO_REPAIR: {AUDIT_AUTO_REPAIR}")
        
        if AUDIT_AUTO_REPAIR:
            print("‚úÖ Reparaci√≥n autom√°tica habilitada")
            
            # Crear un nodo corrupto para probar reparaci√≥n
            ng = bpy.data.node_groups.get("txFxCurveData")
            if ng:
                # Crear nodo de prueba
                test_node = ng.nodes.new('ShaderNodeRGBCurve')
                test_node.name = "test_corrupt_node"
                test_node.label = "Test Corrupt Node"
                
                print(f"üîß Nodo de prueba creado: {test_node.name}")
                
                # Ejecutar auditor√≠a
                try:
                    from curves import audit_or_repair_curve_nodegroup
                    audit_results = audit_or_repair_curve_nodegroup()
                    
                    print(f"üìä Auditor√≠a completada:")
                    print(f"   Objetos reparados: {audit_results.get('repaired_objects', 0)}")
                    
                    # Verificar que el nodo de prueba fue manejado
                    if "test_corrupt_node" not in [n.name for n in ng.nodes]:
                        print("‚úÖ Nodo de prueba fue removido/reparado")
                    else:
                        print("‚ö†Ô∏è Nodo de prueba a√∫n existe")
                    
                    return True
                    
                except ImportError as e:
                    print(f"‚ùå ERROR: No se puede ejecutar auditor√≠a: {e}")
                    return False
            else:
                print("‚ö†Ô∏è No se encontr√≥ NodeGroup para probar")
                return True
        else:
            print("‚ö†Ô∏è Reparaci√≥n autom√°tica deshabilitada")
            return True
            
    except ImportError as e:
        print(f"‚ùå ERROR: No se puede importar configuraci√≥n: {e}")
        return False
    except Exception as e:
        print(f"‚ùå ERROR en test: {e}")
        return False

def test_audit_error_handling():
    """Test de manejo de errores en auditor√≠a."""
    print("\n=== TEST: MANEJO DE ERRORES EN AUDITOR√çA ===")
    
    try:
        # Simular condiciones de error
        print("üîç Probando manejo de errores...")
        
        # Test con NodeGroup corrupto
        ng = bpy.data.node_groups.get("txFxCurveData")
        if ng:
            # Crear nodo inv√°lido
            invalid_node = ng.nodes.new('NodeGroupInput')  # Nodo incorrecto
            invalid_node.name = "invalid_curve_node"
            
            print(f"üîß Nodo inv√°lido creado: {invalid_node.name}")
            
            # Ejecutar auditor√≠a
            try:
                from curves import audit_or_repair_curve_nodegroup
                audit_results = audit_or_repair_curve_nodegroup()
                
                print(f"üìä Auditor√≠a con errores completada:")
                print(f"   Errores: {len(audit_results.get('errors', []))}")
                print(f"   Advertencias: {len(audit_results.get('warnings', []))}")
                
                # Verificar que no crashe√≥
                if 'error' not in audit_results:
                    print("‚úÖ Auditor√≠a manej√≥ errores correctamente")
                    return True
                else:
                    print(f"‚ùå Auditor√≠a fall√≥: {audit_results['error']}")
                    return False
                    
            except Exception as e:
                print(f"‚ùå Auditor√≠a crashe√≥: {e}")
                return False
        else:
            print("‚ö†Ô∏è No se encontr√≥ NodeGroup para probar")
            return True
            
    except Exception as e:
        print(f"‚ùå ERROR en test: {e}")
        return False

def run_all_audit_tests():
    """Ejecutar todas las pruebas de auditor√≠a."""
    print("üöÄ INICIANDO VERIFICACI√ìN DE SISTEMA DE AUDITOR√çA")
    print("=" * 60)
    
    tests = [
        test_audit_repair_operator,
        test_manual_node_deletion,
        test_audit_on_startup,
        test_audit_logging,
        test_audit_auto_repair,
        test_audit_error_handling
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå ERROR en test {test.__name__}: {e}")
            results.append(False)
    
    # Resumen final
    print("\n" + "=" * 60)
    print("üìã RESUMEN DE VERIFICACI√ìN DE AUDITOR√çA")
    print("=" * 60)
    
    passed = sum(results)
    total = len(results)
    
    print(f"‚úÖ Tests pasados: {passed}/{total}")
    
    if passed == total:
        print("üéâ TODAS LAS PRUEBAS DE AUDITOR√çA PASARON")
        return True
    else:
        print("‚ùå ALGUNAS PRUEBAS DE AUDITOR√çA FALLARON")
        return False

# Ejecutar si se llama directamente
if __name__ == "__main__":
    run_all_audit_tests() 